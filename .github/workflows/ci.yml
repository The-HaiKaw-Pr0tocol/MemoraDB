name: CI

on:
  pull_request:
  push:
    branches: [ main ]

permissions:
  pull-requests: write
  contents: read

## it will run after every commit and cancel the older run
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  tests:
    runs-on: ubuntu-latest # running env
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential

      - name: Compile tests
        run: make test 

      - name: Run tests
        run: |
          make clean
          make run-tests

      - name: Upload test logs if failed
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-logs
          path: /tmp/memoradb_test_results.txt

      - name: Post or Update PR Comment with Test Results
        if: always() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const resultsPath = '/tmp/memoradb_test_results.txt';
            let results = '';
            if (fs.existsSync(resultsPath)) {
              results = fs.readFileSync(resultsPath, 'utf8');
            } else {
              results = 'No test results file found.';
            }

            const commentHeader = '### Test Results from CI';
            const body = `${commentHeader}\nCommit: \`${context.sha}\`\n\`\`\`\n${results}\n\`\`\``;

            // Get existing comments on the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            // Try to find our comment
            const existing = comments.find(c => c.body.startsWith(commentHeader));

            if (existing) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existing.id,
                body
              });
            } else {
              // Create a new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body
              });
            }
