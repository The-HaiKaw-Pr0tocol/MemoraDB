# .github/workflows/comment-fork-pr.yml
name: Comment on Fork PR

on:
  workflow_run:
    workflows: ["CI Tests"]
    types:
      - completed

permissions:
  pull-requests: write
  contents: read
  actions: read

jobs:
  comment:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.event == 'pull_request'
    
    steps:
      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          name: test-results-${{ github.event.workflow_run.id }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}

      - name: Read metadata and post comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            // Read the metadata to get PR info
            let metadata;
            try {
              metadata = JSON.parse(fs.readFileSync('metadata.json', 'utf8'));
              console.log('Metadata:', metadata);
            } catch (e) {
              console.error('Could not read metadata:', e);
              return;
            }
            
            const pr_number = metadata.pr_number;
            if (!pr_number) {
              console.log('No PR number found, skipping comment');
              return;
            }
            
            // Read test results
            const safeReadFile = (filePath) => {
              try {
                return fs.existsSync(filePath) ? fs.readFileSync(filePath, 'utf8') : null;
              } catch (e) {
                console.log(`Error reading ${filePath}:`, e.message);
                return null;
              }
            };
            
            let summary = null;
            const jsonContent = safeReadFile('memoradb_summary.json');
            if (jsonContent) {
              try {
                summary = JSON.parse(jsonContent);
              } catch (e) {
                console.log('Error parsing JSON summary:', e.message);
              }
            }
            
            let bodySection;
            let status = 'Unknown';
            
            // Determine workflow status
            const workflowStatus = '${{ github.event.workflow_run.conclusion }}';
            const workflowFailed = workflowStatus !== 'success';
            
            if (summary) {
              if (summary.failed > 0 || workflowFailed) {
                status = 'FAILED';
              } else if (summary.passed > 0) {
                status = 'PASSED';
              }
              
              bodySection = `
            **Status: ${status}**
            
            | Metric | Count |
            |--------|-------|
            | Total  | ${summary.total} |
            | Passed | ${summary.passed} |
            | Failed | ${summary.failed} |
            `;
            } else {
              // Fallback based on workflow status
              if (workflowFailed) {
                status = 'FAILED';
                bodySection = `
            **Status: ${status}**
            
            The test workflow failed. Check the [workflow run](https://github.com/${metadata.repository}/actions/runs/${{ github.event.workflow_run.id }}) for details.
            `;
              } else {
                let raw = safeReadFile('memoradb_test_results.txt') || 'No detailed test results available.';
                const ansiRegex = /\u001b\[[0-9;]*[A-Za-z]/g;
                raw = raw.replace(/\r\n/g, '\n')
                         .replace(/\r/g, '\n')
                         .replace(ansiRegex, '')
                         .trim();
                
                if (raw.includes('FAIL') || raw.includes('ERROR')) {
                  status = 'FAILED';
                } else if (raw.includes('PASS') || raw.includes('OK')) {
                  status = 'PASSED';
                }
                
                bodySection = `
            **Status: ${status}**
            
            <details>
            <summary>Raw Test Output</summary>
            
            \`\`\`
            ${raw}
            \`\`\`
            </details>
            `;
              }
            }
            
            const commitSha = metadata.head_sha;
            const shortSha = commitSha.substring(0, 8);
            const header = '### Test Results';
            const isFromFork = metadata.head_repository !== metadata.repository;
            const forkNote = isFromFork ? ' (from fork)' : '';
            
            const body = `${header}
            
            **Commit:** [\`${shortSha}\`](https://github.com/${metadata.repository}/commit/${commitSha})${forkNote}
            **Workflow:** [View Run](https://github.com/${metadata.repository}/actions/runs/${{ github.event.workflow_run.id }})
            ${bodySection}
            
            ---
            *Updated: ${new Date().toISOString()}*
            `;
            
            try {
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr_number,
              });
              
              const existing = comments.find(c => c.body.includes(header));
              
              if (existing) {
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: existing.id,
                  body
                });
                console.log(`Updated existing comment on PR #${pr_number}`);
              } else {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr_number,
                  body
                });
                console.log(`Created new comment on PR #${pr_number}`);
              }
            } catch (error) {
              console.error('Error posting PR comment:', error);
              core.setFailed(`Failed to post PR comment: ${error.message}`);
            }